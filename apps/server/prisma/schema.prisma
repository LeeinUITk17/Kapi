// This is your Prisma schema file,
// Learn more: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  //directUrl = env("DIRECT_URL")
}

// Enums
enum STATUS {
  NOT_STARTED
  PENDING
  COMPLETED
  IN_PROGRESS
  UPDATED
}

enum VOCABULARY_STATUS {
  LEARNING
  REVIEW_PENDING
  COMPLETED
}

enum NOTIFICATION_STATUS {
  PENDING
  SENT
  FAILED
}

enum NOTIFICATION_TYPE {
  REVIEW
  LESSON_REMINDER
  PROGRESS_MILESTONE
}

model User {
  id                 String              @id @default(uuid())
  name               String
  email              String              @unique
  providerId         String
  givenName          String?
  familyName         String?
  picture            String?
  passwordHash       String?
  refreshToken       String?
  pushToken String? 
  is_admin           Boolean             @default(false)
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  completedLessonCount Int               @default(0)

  // Relations
  courses            Course[]            @relation("UserCourses")
  lessonStatuses     LessonStatus[]
  courseStatuses     CourseStatus[]
  vocabularyStatuses VocabularyStatus[]
  notifications      Notification[]

  ConversationHistory ConversationHistory[]
}
model Conversation {
  id                    String              @id @default(uuid())
  title                 String              
  description           String              
  defaultFirstMessage   String             
  timesToMatchTarget    Int                 @default(10) 
  target                String              
  jsonContent           String?             
  profilePic            String?
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt

  ConversationHistory ConversationHistory[]
}

model ConversationHistory {
  id                 String               @id @default(uuid())
  conversationId     String
  userId             String
  jsonContentTotals  String
  isCompleted        Boolean              @default(false)
  createdAt          DateTime             @default(now())

  // Relations
  conversation       Conversation         @relation(fields: [conversationId], references: [id])
  user               User                 @relation(fields: [userId], references: [id])
  @@unique([conversationId, userId])
}

model Course {
  id                 String              @id @default(uuid())
  title              String
  description        String
  createdById        String
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt

  // Relations
  lessons            Lesson[]            @relation("CourseLessons")
  createdBy          User                @relation("UserCourses", fields: [createdById], references: [id])
  statuses           CourseStatus[]
}

model Lesson {
  id                 String              @id @default(uuid())
  title              String
  content            String              // URL to video
  courseId           String?
  thumbnail          String?
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt

  // Relations
  course             Course?              @relation("CourseLessons", fields: [courseId], references: [id])
  flashCards         FlashCard[]
  grammars           Grammar[]
  vocabularies       Vocabulary[]
  miniTests          MiniTest[]
  statuses           LessonStatus[]
  insights           Insight[]          
  listenings         Listening[]       

  @@index([courseId, createdAt])
}

model FlashCard {
  id                 String              @id @default(uuid())
  term               String              // Japanese term
  definition         String              // Vietnamese meaning
  kanji              String              // Kanji characters
  lessonId           String
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt

  // Relations
  lesson             Lesson              @relation(fields: [lessonId], references: [id])
}

model Vocabulary {
  id                 String              @id @default(uuid())
  wordJP             String              // Japanese word
  wordVN             String              // Vietnamese meaning
  kanji              String              // Kanji characters
  lessonId           String
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt

  // Relations
  lesson             Lesson              @relation(fields: [lessonId], references: [id])
  statuses           VocabularyStatus[]
}

model Grammar {
  id                 String              @id @default(uuid())
  rule               String              // Grammar rule (String or Json format)
  description        String              // Explanation of the rule
  lessonId           String
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt

  // Relations
  lesson             Lesson              @relation(fields: [lessonId], references: [id])
}

model MiniTest {
  id                 String              @id @default(uuid())
  question           String              // Test question
  answer             String              // Correct answer
  lessonId           String
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt

  // Relations
  lesson             Lesson              @relation(fields: [lessonId], references: [id])
}

model LessonStatus {
  id                 String              @id @default(uuid())
  status             STATUS              @default(NOT_STARTED)
  progress           Int                 // Progress percentage
  userId             String
  lessonId           String
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt

  // Relations
  user               User                @relation(fields: [userId], references: [id])
  lesson             Lesson              @relation(fields: [lessonId], references: [id])
}

model CourseStatus {
  id                 String              @id @default(uuid())
  status             STATUS              @default(NOT_STARTED)
  progress           Int                 // Progress percentage
  userId             String
  courseId           String
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt

  // Relations
  user               User                @relation(fields: [userId], references: [id])
  course             Course              @relation(fields: [courseId], references: [id])
}

model Notification {
  id                 String              @id @default(uuid())
  type               NOTIFICATION_TYPE   @default(REVIEW)
  message            String
  sentAt             DateTime?
  status             NOTIFICATION_STATUS @default(PENDING)
  userId             String
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt

  // Relations
  user               User                @relation(fields: [userId], references: [id])
  VocabularyStatus   VocabularyStatus[]
}

model VocabularyStatus {
  id                 String              @id @default(uuid())
  status             VOCABULARY_STATUS   @default(LEARNING)
  learnedAt          DateTime
  nextReviewAt       DateTime
  reviewStage        Int
  userId             String
  vocabularyId       String
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt

  // Relations
  user               User                @relation(fields: [userId], references: [id])
  vocabulary         Vocabulary          @relation(fields: [vocabularyId], references: [id])
  notifications      Notification[]      // Related notifications

  @@index([userId, vocabularyId])
}

model Insight {
  id                 String              @id @default(uuid())
  lessonId           String           
  title              String
  description        String
  imageUrl           String
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt

  lesson             Lesson              @relation(fields: [lessonId], references: [id])
}

model Listening {
  id                String              @id @default(uuid())
  title             String
  description       String 
  lessonId          String           
  audioUrl          String
  thumbnailUrl      String
  lesson             Lesson              @relation(fields: [lessonId], references: [id])
}